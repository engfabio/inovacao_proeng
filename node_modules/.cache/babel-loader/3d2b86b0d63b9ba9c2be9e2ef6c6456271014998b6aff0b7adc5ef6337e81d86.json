{"ast":null,"code":"export let IdeaStatus = /*#__PURE__*/function (IdeaStatus) {\n  IdeaStatus[\"RECEIVED\"] = \"received\";\n  IdeaStatus[\"ANALYZING\"] = \"analyzing\";\n  IdeaStatus[\"APPROVED\"] = \"approved\";\n  IdeaStatus[\"IN_PROGRESS\"] = \"in_progress\";\n  IdeaStatus[\"IMPLEMENTED\"] = \"implemented\";\n  IdeaStatus[\"REJECTED\"] = \"rejected\";\n  return IdeaStatus;\n}({});\n\n// Interfaces para configuração de IA\n\n// Interface melhorada para ideias com campos estruturados\n\n// Interface para resposta da IA\n\n// Interface para contexto de IA","map":{"version":3,"names":["IdeaStatus"],"sources":["C:/github/inovacao_proeng/src/types/index.ts"],"sourcesContent":["export interface User {\n  id: string;\n  name: string;\n  email: string;\n  cpf: string;\n  department: string;\n  position: string;\n  points: number;\n  level: number;\n  badges: Badge[];\n  createdAt: Date;\n}\n\nexport interface Idea {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  benefits: string;\n  authorId: string;\n  author?: User;\n  votes: number;\n  voters: string[];\n  comments: Comment[];\n  status: IdeaStatus;\n  feedback?: string;\n  assignee?: string;\n  tags?: string[];\n  dueDate?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Comment {\n  id: string;\n  content: string;\n  authorId: string;\n  author?: User;\n  ideaId: string;\n  createdAt: Date;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  unlockedAt: Date;\n}\n\nexport enum IdeaStatus {\n  RECEIVED = 'received',\n  ANALYZING = 'analyzing',\n  APPROVED = 'approved',\n  IN_PROGRESS = 'in_progress',\n  IMPLEMENTED = 'implemented',\n  REJECTED = 'rejected'\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  login: (email: string, cpf: string) => Promise<void>;\n  logout: () => void;\n  register: (userData: RegisterData) => Promise<void>;\n}\n\nexport interface RegisterData {\n  name: string;\n  email: string;\n  cpf: string;\n  department: string;\n  position: string;\n  password: string;\n}\n\nexport interface IdeasContextType {\n  ideas: Idea[];\n  submitIdea: (ideaData: Omit<Idea, 'id' | 'authorId' | 'votes' | 'voters' | 'comments' | 'status' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  voteIdea: (ideaId: string) => Promise<void>;\n  addComment: (ideaId: string, content: string) => Promise<void>;\n  updateIdeaStatus: (ideaId: string, status: IdeaStatus, feedback?: string) => Promise<void>;\n  getMyIdeas: () => Idea[];\n  getTopIdeas: () => Idea[];\n}\n\nexport interface GamificationContextType {\n  userPoints: number;\n  userLevel: number;\n  userBadges: Badge[];\n  ranking: User[];\n  addPoints: (points: number) => void;\n  checkAndUnlockBadges: () => void;\n}\n\n// Interfaces para configuração de IA\nexport interface AIProvider {\n  id: string;\n  name: string;\n  models: AIModel[];\n  requiresApiKey: boolean;\n  baseUrl?: string;\n}\n\nexport interface AIModel {\n  id: string;\n  name: string;\n  description: string;\n  maxTokens: number;\n  costPer1kTokens?: number;\n}\n\nexport interface AIConfiguration {\n  id: string;\n  providerId: string;\n  modelId: string;\n  apiKey: string;\n  prompt: string;\n  maxTokens: number;\n  temperature: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Interface melhorada para ideias com campos estruturados\nexport interface IdeaFormData {\n  // Campos básicos\n  title: string;\n  category: string;\n  \n  // Os 5W2H estruturados\n  what: string;           // O quê?\n  who: string;            // Quem? Qual Empresa? Centro de Custo? Tipo de Negócio?\n  when: string;           // Quando?\n  where: string;          // Onde? Qual Empresa? Centro de Custo? Tipo de Negócio?\n  why: string;            // Por quê?\n  how: string;            // Como?\n  howMuch: string;        // Quanto custará?\n  \n  // Campos adicionais\n  difficulties: string;    // Quais as dificuldades?\n  resources: string;       // Recursos Necessários?\n  attentionPoints: string; // Ponto de Atenção?\n  \n  // Campo consolidado para compatibilidade\n  description: string;     // Será gerado automaticamente pela IA\n  benefits: string;        // Será extraído do \"Por quê?\" pela IA\n}\n\n// Interface para resposta da IA\nexport interface AIResponse {\n  success: boolean;\n  suggestions: {\n    title?: string;\n    category?: string;\n    what?: string;\n    who?: string;\n    when?: string;\n    where?: string;\n    why?: string;\n    how?: string;\n    howMuch?: string;\n    difficulties?: string;\n    resources?: string;\n    attentionPoints?: string;\n    description?: string;\n    benefits?: string;\n  };\n  improvements: string[];\n  relatedIdeas: string[];\n  error?: string;\n}\n\n// Interface para contexto de IA\nexport interface AIContextType {\n  configuration: AIConfiguration | null;\n  providers: AIProvider[];\n  updateConfiguration: (config: Partial<AIConfiguration>) => Promise<void>;\n  refreshModels: (providerId: string) => Promise<void>;\n  analyzeIdea: (ideaData: Partial<IdeaFormData>) => Promise<AIResponse>;\n  isProcessing: boolean;\n}"],"mappings":"AAkDA,WAAYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;;AA4CtB;;AA8BA;;AAyBA;;AAwBA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}