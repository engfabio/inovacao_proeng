{"ast":null,"code":"var _jsxFileName = \"C:\\\\github\\\\inovacao_proeng\\\\src\\\\contexts\\\\GamificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { mockUsers } from '../data/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamificationContext = /*#__PURE__*/createContext(undefined);\nexport const useGamification = () => {\n  _s();\n  const context = useContext(GamificationContext);\n  if (!context) {\n    throw new Error('useGamification must be used within a GamificationProvider');\n  }\n  return context;\n};\n_s(useGamification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst levelThresholds = [0, 100, 500, 1000, 2000];\nconst levelNames = ['Iniciante', 'Colaborador', 'Inovador', 'Vision치rio', 'L칤der de Inova칞칚o'];\nexport const GamificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [userPoints, setUserPoints] = useState(0);\n  const [userLevel, setUserLevel] = useState(1);\n  const [userBadges, setUserBadges] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    if (user) {\n      setUserPoints(user.points);\n      setUserLevel(user.level);\n      setUserBadges(user.badges);\n    }\n    updateRanking();\n  }, [user]);\n  const updateRanking = () => {\n    const sortedUsers = [...mockUsers].sort((a, b) => b.points - a.points);\n    setRanking(sortedUsers);\n  };\n  const addPoints = points => {\n    const newPoints = userPoints + points;\n    setUserPoints(newPoints);\n\n    // Verificar novo n칤vel\n    let newLevel = 1;\n    for (let i = levelThresholds.length - 1; i >= 0; i--) {\n      if (newPoints >= levelThresholds[i]) {\n        newLevel = i + 1;\n        break;\n      }\n    }\n    if (newLevel > userLevel) {\n      setUserLevel(newLevel);\n      // Adicionar badge de novo n칤vel\n      const levelBadge = {\n        id: `level-${newLevel}`,\n        name: `N칤vel ${newLevel}: ${levelNames[newLevel - 1]}`,\n        description: `Alcan칞ou o n칤vel ${newLevel}`,\n        icon: '游꿢',\n        unlockedAt: new Date()\n      };\n      setUserBadges([...userBadges, levelBadge]);\n    }\n\n    // Atualizar usu치rio no localStorage\n    if (user) {\n      const updatedUser = {\n        ...user,\n        points: newPoints,\n        level: newLevel\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n    updateRanking();\n  };\n  const checkAndUnlockBadges = () => {\n    // L칩gica para verificar e desbloquear badges baseado em conquistas espec칤ficas\n    // Por exemplo: primeira ideia, 10 votos recebidos, etc.\n  };\n  return /*#__PURE__*/_jsxDEV(GamificationContext.Provider, {\n    value: {\n      userPoints,\n      userLevel,\n      userBadges,\n      ranking,\n      addPoints,\n      checkAndUnlockBadges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s2(GamificationProvider, \"CVBqbNkbY4QRMB5Z3sd/Z+bG1Rw=\", false, function () {\n  return [useAuth];\n});\n_c = GamificationProvider;\nvar _c;\n$RefreshReg$(_c, \"GamificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","mockUsers","jsxDEV","_jsxDEV","GamificationContext","undefined","useGamification","_s","context","Error","levelThresholds","levelNames","GamificationProvider","children","_s2","user","userPoints","setUserPoints","userLevel","setUserLevel","userBadges","setUserBadges","ranking","setRanking","points","level","badges","updateRanking","sortedUsers","sort","a","b","addPoints","newPoints","newLevel","i","length","levelBadge","id","name","description","icon","unlockedAt","Date","updatedUser","localStorage","setItem","JSON","stringify","checkAndUnlockBadges","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/github/inovacao_proeng/src/contexts/GamificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Badge, GamificationContextType, User } from '../types';\nimport { useAuth } from './AuthContext';\nimport { mockUsers } from '../data/mockData';\n\nconst GamificationContext = createContext<GamificationContextType | undefined>(undefined);\n\nexport const useGamification = () => {\n  const context = useContext(GamificationContext);\n  if (!context) {\n    throw new Error('useGamification must be used within a GamificationProvider');\n  }\n  return context;\n};\n\nconst levelThresholds = [0, 100, 500, 1000, 2000];\nconst levelNames = ['Iniciante', 'Colaborador', 'Inovador', 'Vision치rio', 'L칤der de Inova칞칚o'];\n\nexport const GamificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [userPoints, setUserPoints] = useState(0);\n  const [userLevel, setUserLevel] = useState(1);\n  const [userBadges, setUserBadges] = useState<Badge[]>([]);\n  const [ranking, setRanking] = useState<User[]>([]);\n\n  useEffect(() => {\n    if (user) {\n      setUserPoints(user.points);\n      setUserLevel(user.level);\n      setUserBadges(user.badges);\n    }\n    updateRanking();\n  }, [user]);\n\n  const updateRanking = () => {\n    const sortedUsers = [...mockUsers].sort((a, b) => b.points - a.points);\n    setRanking(sortedUsers);\n  };\n\n  const addPoints = (points: number) => {\n    const newPoints = userPoints + points;\n    setUserPoints(newPoints);\n\n    // Verificar novo n칤vel\n    let newLevel = 1;\n    for (let i = levelThresholds.length - 1; i >= 0; i--) {\n      if (newPoints >= levelThresholds[i]) {\n        newLevel = i + 1;\n        break;\n      }\n    }\n    \n    if (newLevel > userLevel) {\n      setUserLevel(newLevel);\n      // Adicionar badge de novo n칤vel\n      const levelBadge: Badge = {\n        id: `level-${newLevel}`,\n        name: `N칤vel ${newLevel}: ${levelNames[newLevel - 1]}`,\n        description: `Alcan칞ou o n칤vel ${newLevel}`,\n        icon: '游꿢',\n        unlockedAt: new Date()\n      };\n      setUserBadges([...userBadges, levelBadge]);\n    }\n\n    // Atualizar usu치rio no localStorage\n    if (user) {\n      const updatedUser = { ...user, points: newPoints, level: newLevel };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n\n    updateRanking();\n  };\n\n  const checkAndUnlockBadges = () => {\n    // L칩gica para verificar e desbloquear badges baseado em conquistas espec칤ficas\n    // Por exemplo: primeira ideia, 10 votos recebidos, etc.\n  };\n\n  return (\n    <GamificationContext.Provider value={{\n      userPoints,\n      userLevel,\n      userBadges,\n      ranking,\n      addPoints,\n      checkAndUnlockBadges\n    }}>\n      {children}\n    </GamificationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}