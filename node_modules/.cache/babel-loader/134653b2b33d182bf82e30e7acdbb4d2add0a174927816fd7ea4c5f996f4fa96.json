{"ast":null,"code":"var _jsxFileName = \"C:\\\\github\\\\inovacao_proeng\\\\src\\\\contexts\\\\IdeasContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { IdeaStatus } from '../types';\nimport { useAuth } from './AuthContext';\nimport { useGamification } from './GamificationContext';\nimport { mockIdeas } from '../data/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IdeasContext = /*#__PURE__*/createContext(undefined);\nexport const useIdeas = () => {\n  _s();\n  const context = useContext(IdeasContext);\n  if (!context) {\n    throw new Error('useIdeas must be used within an IdeasProvider');\n  }\n  return context;\n};\n_s(useIdeas, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const IdeasProvider = ({\n  children\n}) => {\n  _s2();\n  const [ideas, setIdeas] = useState(mockIdeas);\n  const {\n    user\n  } = useAuth();\n  const {\n    addPoints\n  } = useGamification();\n  const submitIdea = async ideaData => {\n    if (!user) throw new Error('Usuário não autenticado');\n    const newIdea = {\n      ...ideaData,\n      id: Date.now().toString(),\n      authorId: user.id,\n      author: user,\n      votes: 0,\n      voters: [],\n      comments: [],\n      status: IdeaStatus.RECEIVED,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setIdeas([...ideas, newIdea]);\n    addPoints(10); // Pontos por submeter ideia\n  };\n  const voteIdea = async ideaId => {\n    if (!user) throw new Error('Usuário não autenticado');\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId && !idea.voters.includes(user.id)) {\n        addPoints(1); // Pontos por votar\n        return {\n          ...idea,\n          votes: idea.votes + 1,\n          voters: [...idea.voters, user.id]\n        };\n      }\n      return idea;\n    }));\n  };\n  const addComment = async (ideaId, content) => {\n    if (!user) throw new Error('Usuário não autenticado');\n    const newComment = {\n      id: Date.now().toString(),\n      content,\n      authorId: user.id,\n      author: user,\n      ideaId,\n      createdAt: new Date()\n    };\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId) {\n        addPoints(3); // Pontos por comentar\n        return {\n          ...idea,\n          comments: [...idea.comments, newComment]\n        };\n      }\n      return idea;\n    }));\n  };\n  const updateIdeaStatus = async (ideaId, status, feedback) => {\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId) {\n        if (status === IdeaStatus.APPROVED) {\n          addPoints(50); // Pontos por ideia aprovada\n        } else if (status === IdeaStatus.IMPLEMENTED) {\n          addPoints(100); // Pontos por ideia implementada\n        }\n        return {\n          ...idea,\n          status,\n          feedback: feedback || idea.feedback,\n          updatedAt: new Date()\n        };\n      }\n      return idea;\n    }));\n  };\n  const getMyIdeas = () => {\n    if (!user) return [];\n    return ideas.filter(idea => idea.authorId === user.id);\n  };\n  const getTopIdeas = () => {\n    return [...ideas].sort((a, b) => b.votes - a.votes).slice(0, 10);\n  };\n  return /*#__PURE__*/_jsxDEV(IdeasContext.Provider, {\n    value: {\n      ideas,\n      submitIdea,\n      voteIdea,\n      addComment,\n      updateIdeaStatus,\n      getMyIdeas,\n      getTopIdeas\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(IdeasProvider, \"t2DJEjJa594Rtgf3l9eANyhVn1A=\", false, function () {\n  return [useAuth, useGamification];\n});\n_c = IdeasProvider;\nvar _c;\n$RefreshReg$(_c, \"IdeasProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","IdeaStatus","useAuth","useGamification","mockIdeas","jsxDEV","_jsxDEV","IdeasContext","undefined","useIdeas","_s","context","Error","IdeasProvider","children","_s2","ideas","setIdeas","user","addPoints","submitIdea","ideaData","newIdea","id","Date","now","toString","authorId","author","votes","voters","comments","status","RECEIVED","createdAt","updatedAt","voteIdea","ideaId","map","idea","includes","addComment","content","newComment","updateIdeaStatus","feedback","APPROVED","IMPLEMENTED","getMyIdeas","filter","getTopIdeas","sort","a","b","slice","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/github/inovacao_proeng/src/contexts/IdeasContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Idea, IdeasContextType, IdeaStatus } from '../types';\nimport { useAuth } from './AuthContext';\nimport { useGamification } from './GamificationContext';\nimport { mockIdeas } from '../data/mockData';\n\nconst IdeasContext = createContext<IdeasContextType | undefined>(undefined);\n\nexport const useIdeas = () => {\n  const context = useContext(IdeasContext);\n  if (!context) {\n    throw new Error('useIdeas must be used within an IdeasProvider');\n  }\n  return context;\n};\n\nexport const IdeasProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [ideas, setIdeas] = useState<Idea[]>(mockIdeas);\n  const { user } = useAuth();\n  const { addPoints } = useGamification();\n\n  const submitIdea = async (ideaData: Omit<Idea, 'id' | 'authorId' | 'votes' | 'voters' | 'comments' | 'status' | 'createdAt' | 'updatedAt'>) => {\n    if (!user) throw new Error('Usuário não autenticado');\n\n    const newIdea: Idea = {\n      ...ideaData,\n      id: Date.now().toString(),\n      authorId: user.id,\n      author: user,\n      votes: 0,\n      voters: [],\n      comments: [],\n      status: IdeaStatus.RECEIVED,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    setIdeas([...ideas, newIdea]);\n    addPoints(10); // Pontos por submeter ideia\n  };\n\n  const voteIdea = async (ideaId: string) => {\n    if (!user) throw new Error('Usuário não autenticado');\n\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId && !idea.voters.includes(user.id)) {\n        addPoints(1); // Pontos por votar\n        return {\n          ...idea,\n          votes: idea.votes + 1,\n          voters: [...idea.voters, user.id]\n        };\n      }\n      return idea;\n    }));\n  };\n\n  const addComment = async (ideaId: string, content: string) => {\n    if (!user) throw new Error('Usuário não autenticado');\n\n    const newComment = {\n      id: Date.now().toString(),\n      content,\n      authorId: user.id,\n      author: user,\n      ideaId,\n      createdAt: new Date()\n    };\n\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId) {\n        addPoints(3); // Pontos por comentar\n        return {\n          ...idea,\n          comments: [...idea.comments, newComment]\n        };\n      }\n      return idea;\n    }));\n  };\n\n  const updateIdeaStatus = async (ideaId: string, status: IdeaStatus, feedback?: string) => {\n    setIdeas(ideas.map(idea => {\n      if (idea.id === ideaId) {\n        if (status === IdeaStatus.APPROVED) {\n          addPoints(50); // Pontos por ideia aprovada\n        } else if (status === IdeaStatus.IMPLEMENTED) {\n          addPoints(100); // Pontos por ideia implementada\n        }\n        return {\n          ...idea,\n          status,\n          feedback: feedback || idea.feedback,\n          updatedAt: new Date()\n        };\n      }\n      return idea;\n    }));\n  };\n\n  const getMyIdeas = () => {\n    if (!user) return [];\n    return ideas.filter(idea => idea.authorId === user.id);\n  };\n\n  const getTopIdeas = () => {\n    return [...ideas].sort((a, b) => b.votes - a.votes).slice(0, 10);\n  };\n\n  return (\n    <IdeasContext.Provider value={{\n      ideas,\n      submitIdea,\n      voteIdea,\n      addComment,\n      updateIdeaStatus,\n      getMyIdeas,\n      getTopIdeas\n    }}>\n      {children}\n    </IdeasContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}