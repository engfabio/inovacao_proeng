{"ast":null,"code":"export let IdeaStatus = /*#__PURE__*/function (IdeaStatus) {\n  IdeaStatus[\"RECEIVED\"] = \"received\";\n  IdeaStatus[\"ANALYZING\"] = \"analyzing\";\n  IdeaStatus[\"APPROVED\"] = \"approved\";\n  IdeaStatus[\"IN_PROGRESS\"] = \"in_progress\";\n  IdeaStatus[\"IMPLEMENTED\"] = \"implemented\";\n  IdeaStatus[\"REJECTED\"] = \"rejected\";\n  return IdeaStatus;\n}({});","map":{"version":3,"names":["IdeaStatus"],"sources":["C:/github/inovacao_proeng/src/types/index.ts"],"sourcesContent":["export interface User {\n  id: string;\n  name: string;\n  email: string;\n  cpf: string;\n  department: string;\n  position: string;\n  points: number;\n  level: number;\n  badges: Badge[];\n  createdAt: Date;\n}\n\nexport interface Idea {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  benefits: string;\n  authorId: string;\n  author?: User;\n  votes: number;\n  voters: string[];\n  comments: Comment[];\n  status: IdeaStatus;\n  feedback?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Comment {\n  id: string;\n  content: string;\n  authorId: string;\n  author?: User;\n  ideaId: string;\n  createdAt: Date;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  unlockedAt: Date;\n}\n\nexport enum IdeaStatus {\n  RECEIVED = 'received',\n  ANALYZING = 'analyzing',\n  APPROVED = 'approved',\n  IN_PROGRESS = 'in_progress',\n  IMPLEMENTED = 'implemented',\n  REJECTED = 'rejected'\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  login: (email: string, cpf: string) => Promise<void>;\n  logout: () => void;\n  register: (userData: RegisterData) => Promise<void>;\n}\n\nexport interface RegisterData {\n  name: string;\n  email: string;\n  cpf: string;\n  department: string;\n  position: string;\n  password: string;\n}\n\nexport interface IdeasContextType {\n  ideas: Idea[];\n  submitIdea: (ideaData: Omit<Idea, 'id' | 'authorId' | 'votes' | 'voters' | 'comments' | 'status' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  voteIdea: (ideaId: string) => Promise<void>;\n  addComment: (ideaId: string, content: string) => Promise<void>;\n  updateIdeaStatus: (ideaId: string, status: IdeaStatus, feedback?: string) => Promise<void>;\n  getMyIdeas: () => Idea[];\n  getTopIdeas: () => Idea[];\n}\n\nexport interface GamificationContextType {\n  userPoints: number;\n  userLevel: number;\n  userBadges: Badge[];\n  ranking: User[];\n  addPoints: (points: number) => void;\n  checkAndUnlockBadges: () => void;\n}"],"mappings":"AA+CA,WAAYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}