{"ast":null,"code":"var _jsxFileName = \"C:\\\\github\\\\inovacao_proeng\\\\src\\\\contexts\\\\AIContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIContext = /*#__PURE__*/createContext(undefined);\n\n// Provedores de IA conhecidos\nconst DEFAULT_PROVIDERS = [{\n  id: 'openai',\n  name: 'OpenAI',\n  models: [{\n    id: 'gpt-4o',\n    name: 'GPT-4o',\n    description: 'Modelo mais avançado da OpenAI com capacidades multimodais',\n    maxTokens: 128000,\n    costPer1kTokens: 0.005\n  }, {\n    id: 'gpt-4o-mini',\n    name: 'GPT-4o Mini',\n    description: 'Versão mais rápida e econômica do GPT-4o',\n    maxTokens: 128000,\n    costPer1kTokens: 0.0015\n  }, {\n    id: 'gpt-4-turbo',\n    name: 'GPT-4 Turbo',\n    description: 'Modelo GPT-4 otimizado para velocidade',\n    maxTokens: 128000,\n    costPer1kTokens: 0.01\n  }, {\n    id: 'gpt-3.5-turbo',\n    name: 'GPT-3.5 Turbo',\n    description: 'Modelo econômico e eficiente',\n    maxTokens: 16384,\n    costPer1kTokens: 0.001\n  }],\n  requiresApiKey: true,\n  baseUrl: 'https://api.openai.com/v1'\n}, {\n  id: 'anthropic',\n  name: 'Anthropic (Claude)',\n  models: [{\n    id: 'claude-3-5-sonnet-20241022',\n    name: 'Claude 3.5 Sonnet',\n    description: 'Modelo mais avançado da Anthropic',\n    maxTokens: 200000,\n    costPer1kTokens: 0.003\n  }, {\n    id: 'claude-3-haiku-20240307',\n    name: 'Claude 3 Haiku',\n    description: 'Modelo rápido e econômico',\n    maxTokens: 200000,\n    costPer1kTokens: 0.00025\n  }],\n  requiresApiKey: true,\n  baseUrl: 'https://api.anthropic.com/v1'\n}, {\n  id: 'google',\n  name: 'Google (Gemini)',\n  models: [{\n    id: 'gemini-1.5-pro',\n    name: 'Gemini 1.5 Pro',\n    description: 'Modelo avançado do Google com grande contexto',\n    maxTokens: 2000000,\n    costPer1kTokens: 0.0025\n  }, {\n    id: 'gemini-1.5-flash',\n    name: 'Gemini 1.5 Flash',\n    description: 'Modelo rápido e eficiente',\n    maxTokens: 1000000,\n    costPer1kTokens: 0.000375\n  }],\n  requiresApiKey: true,\n  baseUrl: 'https://generativelanguage.googleapis.com/v1beta'\n}, {\n  id: 'ollama',\n  name: 'Ollama (Local)',\n  models: [{\n    id: 'llama3.2',\n    name: 'Llama 3.2',\n    description: 'Modelo local da Meta',\n    maxTokens: 131072,\n    costPer1kTokens: 0\n  }, {\n    id: 'mistral',\n    name: 'Mistral 7B',\n    description: 'Modelo local eficiente',\n    maxTokens: 32768,\n    costPer1kTokens: 0\n  }, {\n    id: 'codellama',\n    name: 'Code Llama',\n    description: 'Especializado em código',\n    maxTokens: 100000,\n    costPer1kTokens: 0\n  }],\n  requiresApiKey: false,\n  baseUrl: 'http://localhost:11434/api'\n}];\n\n// Prompt padrão para análise de ideias\nconst DEFAULT_PROMPT = `Você é um assistente especializado em inovação empresarial que ajuda a estruturar e melhorar ideias seguindo a metodologia 5W2H.\n\nAnalise a ideia fornecida e:\n\n1. **MELHORE E COMPLETE** cada campo seguindo a metodologia 5W2H:\n   - **O quê?** (What): Descreva claramente o projeto/ideia\n   - **Quem?** (Who): Identifique responsáveis, empresa, centro de custo, tipo de negócio\n   - **Quando?** (When): Defina cronograma e prazos\n   - **Onde?** (Where): Especifique local, empresa, centro de custo, tipo de negócio\n   - **Por quê?** (Why): Justifique a importância e benefícios\n   - **Como?** (How): Detalhe a metodologia de implementação\n   - **Quanto custará?** (How much): Estime investimentos e retorno\n\n2. **ANALISE ADICIONALMENTE**:\n   - **Dificuldades**: Identifique possíveis obstáculos\n   - **Recursos Necessários**: Liste recursos humanos, financeiros e materiais\n   - **Pontos de Atenção**: Destaque riscos e considerações importantes\n\n3. **SUGIRA MELHORIAS** na redação para tornar a ideia mais clara e profissional\n\n4. **IDENTIFIQUE IDEIAS RELACIONADAS** que poderiam ser mencionadas\n\nResponda SEMPRE em JSON no formato:\n{\n  \"suggestions\": {\n    \"title\": \"título melhorado\",\n    \"category\": \"categoria sugerida\",\n    \"what\": \"o que melhorado\",\n    \"who\": \"quem melhorado\",\n    \"when\": \"quando melhorado\",\n    \"where\": \"onde melhorado\", \n    \"why\": \"por que melhorado\",\n    \"how\": \"como melhorado\",\n    \"howMuch\": \"quanto melhorado\",\n    \"difficulties\": \"dificuldades identificadas\",\n    \"resources\": \"recursos necessários\",\n    \"attentionPoints\": \"pontos de atenção\",\n    \"description\": \"descrição consolidada\",\n    \"benefits\": \"benefícios extraídos\"\n  },\n  \"improvements\": [\"melhoria 1\", \"melhoria 2\"],\n  \"relatedIdeas\": [\"ideia relacionada 1\", \"ideia relacionada 2\"]\n}\n\nIdeia para análise:`;\nexport const AIProvider = ({\n  children\n}) => {\n  _s();\n  const [configuration, setConfiguration] = useState(null);\n  const [providers, setProviders] = useState(DEFAULT_PROVIDERS);\n  const [isProcessing, setIsProcessing] = useState(false);\n  useEffect(() => {\n    // Carregar configuração salva do localStorage\n    const savedConfig = localStorage.getItem('ai_configuration');\n    if (savedConfig) {\n      try {\n        setConfiguration(JSON.parse(savedConfig));\n      } catch (error) {\n        console.error('Erro ao carregar configuração de IA:', error);\n      }\n    }\n  }, []);\n  const updateConfiguration = async config => {\n    var _config$isActive;\n    const updatedConfig = {\n      id: (configuration === null || configuration === void 0 ? void 0 : configuration.id) || 'default',\n      providerId: config.providerId || '',\n      modelId: config.modelId || '',\n      apiKey: config.apiKey || '',\n      prompt: config.prompt || DEFAULT_PROMPT,\n      maxTokens: config.maxTokens || 4000,\n      temperature: config.temperature || 0.7,\n      isActive: (_config$isActive = config.isActive) !== null && _config$isActive !== void 0 ? _config$isActive : true,\n      createdAt: (configuration === null || configuration === void 0 ? void 0 : configuration.createdAt) || new Date(),\n      updatedAt: new Date(),\n      ...config\n    };\n    setConfiguration(updatedConfig);\n    localStorage.setItem('ai_configuration', JSON.stringify(updatedConfig));\n  };\n  const refreshModels = async providerId => {\n    try {\n      // Simular atualização de modelos (em uma implementação real, faria uma chamada à API)\n      console.log(`Atualizando modelos para o provedor: ${providerId}`);\n\n      // Aqui você poderia fazer uma chamada real para obter os modelos mais recentes\n      // Por exemplo, para OpenAI: GET https://api.openai.com/v1/models\n\n      // Por enquanto, apenas simular a atualização\n      setProviders(prev => prev.map(provider => {\n        if (provider.id === providerId) {\n          return {\n            ...provider,\n            models: [...provider.models] // Simular que os modelos foram atualizados\n          };\n        }\n        return provider;\n      }));\n    } catch (error) {\n      console.error('Erro ao atualizar modelos:', error);\n      throw error;\n    }\n  };\n  const analyzeIdea = async ideaData => {\n    if (!configuration || !configuration.isActive) {\n      return {\n        success: false,\n        suggestions: {},\n        improvements: [],\n        relatedIdeas: [],\n        error: 'Configuração de IA não encontrada ou inativa'\n      };\n    }\n    setIsProcessing(true);\n    try {\n      // Montar o prompt com os dados da ideia\n      const ideaText = `\nTÍTULO: ${ideaData.title || 'Não informado'}\nCATEGORIA: ${ideaData.category || 'Não informada'}\n\nO QUÊ: ${ideaData.what || 'Não informado'}\nQUEM: ${ideaData.who || 'Não informado'}\nQUANDO: ${ideaData.when || 'Não informado'}\nONDE: ${ideaData.where || 'Não informado'}\nPOR QUÊ: ${ideaData.why || 'Não informado'}\nCOMO: ${ideaData.how || 'Não informado'}\nQUANTO CUSTARÁ: ${ideaData.howMuch || 'Não informado'}\nDIFICULDADES: ${ideaData.difficulties || 'Não informado'}\nRECURSOS NECESSÁRIOS: ${ideaData.resources || 'Não informado'}\nPONTOS DE ATENÇÃO: ${ideaData.attentionPoints || 'Não informado'}\n      `.trim();\n      const fullPrompt = `${configuration.prompt}\\n\\n${ideaText}`;\n\n      // Simular chamada à API da IA (substituir por implementação real)\n      const response = await simulateAICall(fullPrompt, configuration);\n      return response;\n    } catch (error) {\n      console.error('Erro ao analisar ideia com IA:', error);\n      return {\n        success: false,\n        suggestions: {},\n        improvements: [],\n        relatedIdeas: [],\n        error: `Erro na análise: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      };\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const contextValue = {\n    configuration,\n    providers,\n    updateConfiguration,\n    refreshModels,\n    analyzeIdea,\n    isProcessing\n  };\n  return /*#__PURE__*/_jsxDEV(AIContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n\n// Função para simular chamada à IA (substituir por implementação real)\n_s(AIProvider, \"K/+gKl4iYTrph4i0jPwJ1X6m8fo=\");\n_c = AIProvider;\nconst simulateAICall = async (prompt, config) => {\n  // Simular delay da API\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // Resposta simulada (em produção, fazer chamada real para a API)\n  return {\n    success: true,\n    suggestions: {\n      title: \"Centro de Excelência em Capacitação e Aperfeiçoamento Proeng (CECAP)\",\n      category: \"Capacitação e Desenvolvimento\",\n      what: \"Estabelecer um departamento interno especializado em capacitação e aperfeiçoamento técnico, denominado CECAP, focado inicialmente em colaboradores internos e posteriormente expandido para o mercado externo, posicionando a Proeng como referência em treinamentos de segurança do trabalho.\",\n      who: \"Empresa: Proeng | Centro de Custo: Departamento CECAP (novo) | Responsáveis: Equipe de RH e Segurança do Trabalho | Tipo de Negócio: Prestação de serviços de treinamento e capacitação\",\n      when: \"Implementação em 3 fases: Fase 1 (Meses 1-2): Planejamento e estruturação | Fase 2 (Meses 3-4): Desenvolvimento de conteúdo e infraestrutura | Fase 3 (Meses 5-6): Lançamento piloto interno\",\n      where: \"Instalações da Proeng com adaptação de espaços para salas de treinamento | Centro de Custo: CECAP | Expansão futura para atendimento externo nas mesmas instalações\",\n      why: \"Otimizar processos internos de capacitação, reduzir custos com treinamentos externos, melhorar a qualificação dos colaboradores, gerar nova fonte de receita e estabelecer a Proeng como referência em segurança do trabalho no mercado.\",\n      how: \"Através de metodologia estruturada incluindo: levantamento de necessidades, desenvolvimento de conteúdo programático, aquisição de equipamentos e materiais didáticos, certificação de instrutores, criação de plataforma digital de apoio e implementação de sistema de avaliação.\",\n      howMuch: \"Investimento inicial: R$ 50.000,00 | ROI esperado: 6-8 meses para cobertura do investimento | Receita projetada: A partir do 9º mês | Margem estimada: 60-70% após estabilização\",\n      difficulties: \"Necessidade de aprovação da diretoria, adaptação de espaços físicos, certificação junto aos órgãos competentes, concorrência com centros estabelecidos, captação inicial de clientes externos e manutenção da qualidade dos serviços.\",\n      resources: \"Recursos Financeiros: R$ 50.000,00 iniciais | Recursos Humanos: 2-3 instrutores qualificados, 1 coordenador administrativo | Recursos Materiais: Equipamentos de segurança, material didático, sistema de gestão de treinamentos, infraestrutura física adequada\",\n      attentionPoints: \"Conformidade regulatória com NRs e órgãos certificadores, manutenção da qualidade para preservar a reputação da Proeng, gestão de agenda para não conflitar com atividades principais, atualização constante de conteúdos conforme mudanças normativas.\",\n      description: \"O projeto CECAP visa criar um centro de excelência interno para capacitação em segurança do trabalho, otimizando recursos e posicionando a Proeng como referência no mercado através de treinamentos de alta qualidade.\",\n      benefits: \"Redução de custos com treinamentos externos, melhoria na qualificação dos colaboradores, nova fonte de receita, fortalecimento da marca Proeng no mercado de segurança do trabalho e otimização de processos internos.\"\n    },\n    improvements: [\"Considere incluir parcerias com universidades para certificação acadêmica\", \"Avalie a criação de uma plataforma EAD para ampliar o alcance\", \"Implemente sistema de feedback contínuo dos participantes\", \"Considere certificação ISO para o centro de treinamento\"],\n    relatedIdeas: [\"Sistema de gestão de competências internas\", \"Plataforma digital de treinamentos\", \"Programa de mentoria interna\", \"Centro de simulação de acidentes\"]\n  };\n};\nexport const useAI = () => {\n  _s2();\n  const context = useContext(AIContext);\n  if (context === undefined) {\n    throw new Error('useAI must be used within an AIProvider');\n  }\n  return context;\n};\n_s2(useAI, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AIProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AIContext","undefined","DEFAULT_PROVIDERS","id","name","models","description","maxTokens","costPer1kTokens","requiresApiKey","baseUrl","DEFAULT_PROMPT","AIProvider","children","_s","configuration","setConfiguration","providers","setProviders","isProcessing","setIsProcessing","savedConfig","localStorage","getItem","JSON","parse","error","console","updateConfiguration","config","_config$isActive","updatedConfig","providerId","modelId","apiKey","prompt","temperature","isActive","createdAt","Date","updatedAt","setItem","stringify","refreshModels","log","prev","map","provider","analyzeIdea","ideaData","success","suggestions","improvements","relatedIdeas","ideaText","title","category","what","who","when","where","why","how","howMuch","difficulties","resources","attentionPoints","trim","fullPrompt","response","simulateAICall","Error","message","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Promise","resolve","setTimeout","benefits","useAI","_s2","context","$RefreshReg$"],"sources":["C:/github/inovacao_proeng/src/contexts/AIContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { AIConfiguration, AIProvider as AIProviderType, AIModel, AIContextType, AIResponse, IdeaFormData } from '../types';\r\n\r\nconst AIContext = createContext<AIContextType | undefined>(undefined);\r\n\r\n// Provedores de IA conhecidos\r\nconst DEFAULT_PROVIDERS: AIProviderType[] = [\r\n  {\r\n    id: 'openai',\r\n    name: 'OpenAI',\r\n    models: [\r\n      {\r\n        id: 'gpt-4o',\r\n        name: 'GPT-4o',\r\n        description: 'Modelo mais avançado da OpenAI com capacidades multimodais',\r\n        maxTokens: 128000,\r\n        costPer1kTokens: 0.005\r\n      },\r\n      {\r\n        id: 'gpt-4o-mini',\r\n        name: 'GPT-4o Mini',\r\n        description: 'Versão mais rápida e econômica do GPT-4o',\r\n        maxTokens: 128000,\r\n        costPer1kTokens: 0.0015\r\n      },\r\n      {\r\n        id: 'gpt-4-turbo',\r\n        name: 'GPT-4 Turbo',\r\n        description: 'Modelo GPT-4 otimizado para velocidade',\r\n        maxTokens: 128000,\r\n        costPer1kTokens: 0.01\r\n      },\r\n      {\r\n        id: 'gpt-3.5-turbo',\r\n        name: 'GPT-3.5 Turbo',\r\n        description: 'Modelo econômico e eficiente',\r\n        maxTokens: 16384,\r\n        costPer1kTokens: 0.001\r\n      }\r\n    ],\r\n    requiresApiKey: true,\r\n    baseUrl: 'https://api.openai.com/v1'\r\n  },\r\n  {\r\n    id: 'anthropic',\r\n    name: 'Anthropic (Claude)',\r\n    models: [\r\n      {\r\n        id: 'claude-3-5-sonnet-20241022',\r\n        name: 'Claude 3.5 Sonnet',\r\n        description: 'Modelo mais avançado da Anthropic',\r\n        maxTokens: 200000,\r\n        costPer1kTokens: 0.003\r\n      },\r\n      {\r\n        id: 'claude-3-haiku-20240307',\r\n        name: 'Claude 3 Haiku',\r\n        description: 'Modelo rápido e econômico',\r\n        maxTokens: 200000,\r\n        costPer1kTokens: 0.00025\r\n      }\r\n    ],\r\n    requiresApiKey: true,\r\n    baseUrl: 'https://api.anthropic.com/v1'\r\n  },\r\n  {\r\n    id: 'google',\r\n    name: 'Google (Gemini)',\r\n    models: [\r\n      {\r\n        id: 'gemini-1.5-pro',\r\n        name: 'Gemini 1.5 Pro',\r\n        description: 'Modelo avançado do Google com grande contexto',\r\n        maxTokens: 2000000,\r\n        costPer1kTokens: 0.0025\r\n      },\r\n      {\r\n        id: 'gemini-1.5-flash',\r\n        name: 'Gemini 1.5 Flash',\r\n        description: 'Modelo rápido e eficiente',\r\n        maxTokens: 1000000,\r\n        costPer1kTokens: 0.000375\r\n      }\r\n    ],\r\n    requiresApiKey: true,\r\n    baseUrl: 'https://generativelanguage.googleapis.com/v1beta'\r\n  },\r\n  {\r\n    id: 'ollama',\r\n    name: 'Ollama (Local)',\r\n    models: [\r\n      {\r\n        id: 'llama3.2',\r\n        name: 'Llama 3.2',\r\n        description: 'Modelo local da Meta',\r\n        maxTokens: 131072,\r\n        costPer1kTokens: 0\r\n      },\r\n      {\r\n        id: 'mistral',\r\n        name: 'Mistral 7B',\r\n        description: 'Modelo local eficiente',\r\n        maxTokens: 32768,\r\n        costPer1kTokens: 0\r\n      },\r\n      {\r\n        id: 'codellama',\r\n        name: 'Code Llama',\r\n        description: 'Especializado em código',\r\n        maxTokens: 100000,\r\n        costPer1kTokens: 0\r\n      }\r\n    ],\r\n    requiresApiKey: false,\r\n    baseUrl: 'http://localhost:11434/api'\r\n  }\r\n];\r\n\r\n// Prompt padrão para análise de ideias\r\nconst DEFAULT_PROMPT = `Você é um assistente especializado em inovação empresarial que ajuda a estruturar e melhorar ideias seguindo a metodologia 5W2H.\r\n\r\nAnalise a ideia fornecida e:\r\n\r\n1. **MELHORE E COMPLETE** cada campo seguindo a metodologia 5W2H:\r\n   - **O quê?** (What): Descreva claramente o projeto/ideia\r\n   - **Quem?** (Who): Identifique responsáveis, empresa, centro de custo, tipo de negócio\r\n   - **Quando?** (When): Defina cronograma e prazos\r\n   - **Onde?** (Where): Especifique local, empresa, centro de custo, tipo de negócio\r\n   - **Por quê?** (Why): Justifique a importância e benefícios\r\n   - **Como?** (How): Detalhe a metodologia de implementação\r\n   - **Quanto custará?** (How much): Estime investimentos e retorno\r\n\r\n2. **ANALISE ADICIONALMENTE**:\r\n   - **Dificuldades**: Identifique possíveis obstáculos\r\n   - **Recursos Necessários**: Liste recursos humanos, financeiros e materiais\r\n   - **Pontos de Atenção**: Destaque riscos e considerações importantes\r\n\r\n3. **SUGIRA MELHORIAS** na redação para tornar a ideia mais clara e profissional\r\n\r\n4. **IDENTIFIQUE IDEIAS RELACIONADAS** que poderiam ser mencionadas\r\n\r\nResponda SEMPRE em JSON no formato:\r\n{\r\n  \"suggestions\": {\r\n    \"title\": \"título melhorado\",\r\n    \"category\": \"categoria sugerida\",\r\n    \"what\": \"o que melhorado\",\r\n    \"who\": \"quem melhorado\",\r\n    \"when\": \"quando melhorado\",\r\n    \"where\": \"onde melhorado\", \r\n    \"why\": \"por que melhorado\",\r\n    \"how\": \"como melhorado\",\r\n    \"howMuch\": \"quanto melhorado\",\r\n    \"difficulties\": \"dificuldades identificadas\",\r\n    \"resources\": \"recursos necessários\",\r\n    \"attentionPoints\": \"pontos de atenção\",\r\n    \"description\": \"descrição consolidada\",\r\n    \"benefits\": \"benefícios extraídos\"\r\n  },\r\n  \"improvements\": [\"melhoria 1\", \"melhoria 2\"],\r\n  \"relatedIdeas\": [\"ideia relacionada 1\", \"ideia relacionada 2\"]\r\n}\r\n\r\nIdeia para análise:`;\r\n\r\ninterface AIProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AIProvider: React.FC<AIProviderProps> = ({ children }) => {\r\n  const [configuration, setConfiguration] = useState<AIConfiguration | null>(null);\r\n  const [providers, setProviders] = useState<AIProvider[]>(DEFAULT_PROVIDERS);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Carregar configuração salva do localStorage\r\n    const savedConfig = localStorage.getItem('ai_configuration');\r\n    if (savedConfig) {\r\n      try {\r\n        setConfiguration(JSON.parse(savedConfig));\r\n      } catch (error) {\r\n        console.error('Erro ao carregar configuração de IA:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const updateConfiguration = async (config: Partial<AIConfiguration>): Promise<void> => {\r\n    const updatedConfig: AIConfiguration = {\r\n      id: configuration?.id || 'default',\r\n      providerId: config.providerId || '',\r\n      modelId: config.modelId || '',\r\n      apiKey: config.apiKey || '',\r\n      prompt: config.prompt || DEFAULT_PROMPT,\r\n      maxTokens: config.maxTokens || 4000,\r\n      temperature: config.temperature || 0.7,\r\n      isActive: config.isActive ?? true,\r\n      createdAt: configuration?.createdAt || new Date(),\r\n      updatedAt: new Date(),\r\n      ...config\r\n    };\r\n\r\n    setConfiguration(updatedConfig);\r\n    localStorage.setItem('ai_configuration', JSON.stringify(updatedConfig));\r\n  };\r\n\r\n  const refreshModels = async (providerId: string): Promise<void> => {\r\n    try {\r\n      // Simular atualização de modelos (em uma implementação real, faria uma chamada à API)\r\n      console.log(`Atualizando modelos para o provedor: ${providerId}`);\r\n      \r\n      // Aqui você poderia fazer uma chamada real para obter os modelos mais recentes\r\n      // Por exemplo, para OpenAI: GET https://api.openai.com/v1/models\r\n      \r\n      // Por enquanto, apenas simular a atualização\r\n      setProviders(prev => prev.map(provider => {\r\n        if (provider.id === providerId) {\r\n          return {\r\n            ...provider,\r\n            models: [...provider.models] // Simular que os modelos foram atualizados\r\n          };\r\n        }\r\n        return provider;\r\n      }));\r\n      \r\n    } catch (error) {\r\n      console.error('Erro ao atualizar modelos:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const analyzeIdea = async (ideaData: Partial<IdeaFormData>): Promise<AIResponse> => {\r\n    if (!configuration || !configuration.isActive) {\r\n      return {\r\n        success: false,\r\n        suggestions: {},\r\n        improvements: [],\r\n        relatedIdeas: [],\r\n        error: 'Configuração de IA não encontrada ou inativa'\r\n      };\r\n    }\r\n\r\n    setIsProcessing(true);\r\n\r\n    try {\r\n      // Montar o prompt com os dados da ideia\r\n      const ideaText = `\r\nTÍTULO: ${ideaData.title || 'Não informado'}\r\nCATEGORIA: ${ideaData.category || 'Não informada'}\r\n\r\nO QUÊ: ${ideaData.what || 'Não informado'}\r\nQUEM: ${ideaData.who || 'Não informado'}\r\nQUANDO: ${ideaData.when || 'Não informado'}\r\nONDE: ${ideaData.where || 'Não informado'}\r\nPOR QUÊ: ${ideaData.why || 'Não informado'}\r\nCOMO: ${ideaData.how || 'Não informado'}\r\nQUANTO CUSTARÁ: ${ideaData.howMuch || 'Não informado'}\r\nDIFICULDADES: ${ideaData.difficulties || 'Não informado'}\r\nRECURSOS NECESSÁRIOS: ${ideaData.resources || 'Não informado'}\r\nPONTOS DE ATENÇÃO: ${ideaData.attentionPoints || 'Não informado'}\r\n      `.trim();\r\n\r\n      const fullPrompt = `${configuration.prompt}\\n\\n${ideaText}`;\r\n\r\n      // Simular chamada à API da IA (substituir por implementação real)\r\n      const response = await simulateAICall(fullPrompt, configuration);\r\n      \r\n      return response;\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao analisar ideia com IA:', error);\r\n      return {\r\n        success: false,\r\n        suggestions: {},\r\n        improvements: [],\r\n        relatedIdeas: [],\r\n        error: `Erro na análise: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\r\n      };\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const contextValue: AIContextType = {\r\n    configuration,\r\n    providers,\r\n    updateConfiguration,\r\n    refreshModels,\r\n    analyzeIdea,\r\n    isProcessing\r\n  };\r\n\r\n  return (\r\n    <AIContext.Provider value={contextValue}>\r\n      {children}\r\n    </AIContext.Provider>\r\n  );\r\n};\r\n\r\n// Função para simular chamada à IA (substituir por implementação real)\r\nconst simulateAICall = async (prompt: string, config: AIConfiguration): Promise<AIResponse> => {\r\n  // Simular delay da API\r\n  await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n  // Resposta simulada (em produção, fazer chamada real para a API)\r\n  return {\r\n    success: true,\r\n    suggestions: {\r\n      title: \"Centro de Excelência em Capacitação e Aperfeiçoamento Proeng (CECAP)\",\r\n      category: \"Capacitação e Desenvolvimento\",\r\n      what: \"Estabelecer um departamento interno especializado em capacitação e aperfeiçoamento técnico, denominado CECAP, focado inicialmente em colaboradores internos e posteriormente expandido para o mercado externo, posicionando a Proeng como referência em treinamentos de segurança do trabalho.\",\r\n      who: \"Empresa: Proeng | Centro de Custo: Departamento CECAP (novo) | Responsáveis: Equipe de RH e Segurança do Trabalho | Tipo de Negócio: Prestação de serviços de treinamento e capacitação\",\r\n      when: \"Implementação em 3 fases: Fase 1 (Meses 1-2): Planejamento e estruturação | Fase 2 (Meses 3-4): Desenvolvimento de conteúdo e infraestrutura | Fase 3 (Meses 5-6): Lançamento piloto interno\",\r\n      where: \"Instalações da Proeng com adaptação de espaços para salas de treinamento | Centro de Custo: CECAP | Expansão futura para atendimento externo nas mesmas instalações\",\r\n      why: \"Otimizar processos internos de capacitação, reduzir custos com treinamentos externos, melhorar a qualificação dos colaboradores, gerar nova fonte de receita e estabelecer a Proeng como referência em segurança do trabalho no mercado.\",\r\n      how: \"Através de metodologia estruturada incluindo: levantamento de necessidades, desenvolvimento de conteúdo programático, aquisição de equipamentos e materiais didáticos, certificação de instrutores, criação de plataforma digital de apoio e implementação de sistema de avaliação.\",\r\n      howMuch: \"Investimento inicial: R$ 50.000,00 | ROI esperado: 6-8 meses para cobertura do investimento | Receita projetada: A partir do 9º mês | Margem estimada: 60-70% após estabilização\",\r\n      difficulties: \"Necessidade de aprovação da diretoria, adaptação de espaços físicos, certificação junto aos órgãos competentes, concorrência com centros estabelecidos, captação inicial de clientes externos e manutenção da qualidade dos serviços.\",\r\n      resources: \"Recursos Financeiros: R$ 50.000,00 iniciais | Recursos Humanos: 2-3 instrutores qualificados, 1 coordenador administrativo | Recursos Materiais: Equipamentos de segurança, material didático, sistema de gestão de treinamentos, infraestrutura física adequada\",\r\n      attentionPoints: \"Conformidade regulatória com NRs e órgãos certificadores, manutenção da qualidade para preservar a reputação da Proeng, gestão de agenda para não conflitar com atividades principais, atualização constante de conteúdos conforme mudanças normativas.\",\r\n      description: \"O projeto CECAP visa criar um centro de excelência interno para capacitação em segurança do trabalho, otimizando recursos e posicionando a Proeng como referência no mercado através de treinamentos de alta qualidade.\",\r\n      benefits: \"Redução de custos com treinamentos externos, melhoria na qualificação dos colaboradores, nova fonte de receita, fortalecimento da marca Proeng no mercado de segurança do trabalho e otimização de processos internos.\"\r\n    },\r\n    improvements: [\r\n      \"Considere incluir parcerias com universidades para certificação acadêmica\",\r\n      \"Avalie a criação de uma plataforma EAD para ampliar o alcance\",\r\n      \"Implemente sistema de feedback contínuo dos participantes\",\r\n      \"Considere certificação ISO para o centro de treinamento\"\r\n    ],\r\n    relatedIdeas: [\r\n      \"Sistema de gestão de competências internas\",\r\n      \"Plataforma digital de treinamentos\",\r\n      \"Programa de mentoria interna\",\r\n      \"Centro de simulação de acidentes\"\r\n    ]\r\n  };\r\n};\r\n\r\nexport const useAI = (): AIContextType => {\r\n  const context = useContext(AIContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAI must be used within an AIProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}